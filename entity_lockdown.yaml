AWSTemplateFormatVersion: '2010-09-09'
Description: Template to deploy resources for AWS entity lockdown solution.

Parameters:
  EntityLockdownLambdaName:
    Type: String
    Description: 'Name assigned to entity lockdown AWS Lambda function'
    Default: 'entity-lockdown-function'
  EntityLockdownSnsTopic:
    Type: String
    Description: 'Name assigned to entity lockdown AWS SNS topic'
    Default: 'entity-lockdown-sns-topic'
  EntityLockdownAuditSnsTopic:
    Type: String
    Description: 'Name assigned to entity lockdown audit AWS SNS topic'
    Default: 'entity-lockdown-audit-sns-topic'
  EntityLockdownFailureSnsTopic:
    Type: String
    Description: 'Name assigned to entity lockdown failure AWS SNS topic'
    Default: 'entity-lockdown-failure-sns-topic'
  EntityLockdownSnsMessageExternalID:
    Type: String
    MinLength: 9
    Description: 'Extrenal ID to validate entity lockdown SNS message. 9 characters long'
  EntityLockdownAuditSnsTopicSubscriptionEmail:
    Type: String
    AllowedPattern: '[^@]+@[^@]+\.[^@]+'
    Description: 'Email address to receive entity lockdown notifications'
  EntityLockdownFailureSnsTopicSubscriptionEmail:
    Type: String
    AllowedPattern: '[^@]+@[^@]+\.[^@]+'
    Description: 'Email address to receive entity lockdown failure notifications'
Resources:
    EntityLockdownTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            DisplayName: !Sub 'Entity Lockdown Topic'
            TopicName: !Ref EntityLockdownSnsTopic
            Subscription:
                - Protocol: lambda
                  Endpoint: !GetAtt EntityLockdownLambda.Arn
    EntityLockdownAuditTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            DisplayName: !Sub 'Entity Lockdown Audit'
            TopicName: !Ref EntityLockdownAuditSnsTopic
    EntityLockdownFailureTopic:
        Type: 'AWS::SNS::Topic'
        Properties:
            DisplayName: !Sub 'Entity Lockdown Failure'
            TopicName: !Ref EntityLockdownFailureSnsTopic
    EntityLockdownAuditTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: !Ref EntityLockdownAuditSnsTopicSubscriptionEmail
        Protocol: email
        TopicArn: !Ref 'EntityLockdownAuditTopic'
    EntityLockdownFailureTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: !Ref EntityLockdownFailureSnsTopicSubscriptionEmail
        Protocol: email
        TopicArn: !Ref 'EntityLockdownFailureTopic'
    EntityLockdownLambdaInvokePermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
          Action: 'lambda:InvokeFunction'
          FunctionName: !Ref EntityLockdownLambda
          Principal: sns.amazonaws.com
    EntityLockdownTopicPolicy:
        Type: 'AWS::SNS::TopicPolicy'
        Properties:
            Topics:
                - !Ref EntityLockdownTopic
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action: 'sns:Publish'
                  Resource: !Ref EntityLockdownTopic
                  Principal:
                    AWS: '*'
                  Condition:
                    ArnLike:
                        AWS:SourceArn: !Sub 'arn:aws:*:*:${AWS::AccountId}:*'
    EntityLockdownLambdaExecutionRole:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: 'EntityLockdownLambdaExecutionRole'
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                          - lambda.amazonaws.com
                      Action:
                        - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
              - PolicyName: RolePolicyForEntityLockdownLambda
                PolicyDocument: 
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                         - sts:AssumeRole
                        Resource: '*'
                      - Effect: Allow
                        Action:
                          - sns:Publish
                        Resource: 
                          - !Sub ${EntityLockdownAuditTopic.TopicArn}
                          - !Sub ${EntityLockdownFailureTopic.TopicArn}
    EntityLockdownAuditTopicPolicy:
        Type: 'AWS::SNS::TopicPolicy'
        Properties:
            Topics:
                - !Ref EntityLockdownAuditTopic
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action: 'sns:Publish'
                  Resource: !Ref EntityLockdownAuditTopic
                  Principal:
                    Service: lambda.amazonaws.com
                  Condition:
                    ArnLike:
                        AWS:SourceArn: !Sub ${EntityLockdownLambdaExecutionRole.Arn}
    EntityLockdownFailureTopicPolicy:
        Type: 'AWS::SNS::TopicPolicy'
        Properties:
            Topics:
                - !Ref EntityLockdownFailureTopic
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Action: 'sns:Publish'
                  Resource: !Ref EntityLockdownFailureTopic
                  Principal:
                    Service: lambda.amazonaws.com
                  Condition:
                    ArnLike:
                        AWS:SourceArn: !Sub ${EntityLockdownLambdaExecutionRole.Arn}
    EntityLockdownLambda:
        Type: 'AWS::Lambda::Function'
        Properties:
            FunctionName: !Ref EntityLockdownLambdaName
            Handler: lambda_function.lambda_handler
            Runtime: python3.9
            Role: !Sub ${EntityLockdownLambdaExecutionRole.Arn}
            Code:
                S3Bucket: "aws-entity-incident-response"
                S3Key: "entity_lockdown_lambda_handler.zip"
            Description: ''
            MemorySize: 128
            Timeout: 120
            Environment:
              Variables:
                EntityLockdownSNSMessageExternalId: !Ref EntityLockdownSnsMessageExternalID
                RoleForEntityLockdownLambda: 'RoleForEntityLockdownLambdaFunction'
                AuditEntityLockdownSnsTopic:  !GetAtt EntityLockdownAuditTopic.TopicArn
            DeadLetterConfig:
              TargetArn: !GetAtt EntityLockdownFailureTopic.TopicArn
    RoleForEntityLockdownLambda:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: 'RoleForEntityLockdownLambdaFunction'
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                        AWS:
                          - !Sub ${EntityLockdownLambdaExecutionRole.Arn}
                      Action:
                        - sts:AssumeRole
            Policies:
              - PolicyName: RolePolicyForEntityLockdownLambdaFunction
                PolicyDocument: 
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - ec2:AuthorizeSecurityGroupEgress 
                          - ec2:AuthorizeSecurityGroupIngress 
                          - ec2:RevokeSecurityGroupIngress 
                          - ec2:RevokeSecurityGroupEgress 
                          - ec2:DisassociateIamInstanceProfile 
                          - lambda:GetFunctionConfiguration 
                          - lambda:PutFunctionConcurrency
                        Resource: 
                          - !Sub "arn:aws:lambda:*:${AWS::AccountId}:function:*"
                          - !Sub "arn:aws:ec2:*:${AWS::AccountId}:security-group/*"
                          - !Sub "arn:aws:ec2:*:${AWS::AccountId}:security-group-rule/*"
                          - !Sub "arn:aws:ec2:*:${AWS::AccountId}:instance/*"
                      - Effect: Allow
                        Action: 
                          - ec2:DescribeInstances 
                          - ec2:DescribeIamInstanceProfileAssociations 
                          - ec2:CreateSecurityGroup 
                          - ec2:ModifyInstanceAttribute 
                          - ec2:DescribeSecurityGroups
                        Resource: '*'
                      - Effect: Allow
                        Action:
                          - iam:AttachUserPolicy
                          - iam:AttachRolePolicy
                        Resource:
                          - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
                          - !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
Outputs:
  EntityLockdownTopicName:
    Description: The Entity Lockdown SNS topic name
    Value: !GetAtt EntityLockdownTopic.TopicName
  EntityLockdownLambdaName:
    Description: The Entity Lockdown Lambda function name
    Value: !Ref EntityLockdownLambdaName
  EntityLockdownLambdaExecutionRoleArn:
    Description: The Entity Lockdown Lambda execution role arn
    Value: !GetAtt EntityLockdownLambdaExecutionRole.Arn
  EntityLockdownAuditSnsTopicName:
    Description: The Entity Lockdown audit SNS topic name
    Value: !GetAtt EntityLockdownAuditTopic.TopicName
  EntityLockdownAuditSnsTopicName:
    Description: The Entity Lockdown failure SNS topic name
    Value: !GetAtt EntityLockdownFailureTopic.TopicName
  RoleForEntityLockdownLambdaName:
    Description: The IAM Role assumed by Entity Lockdown Lambda 
    Value: 'RoleForEntityLockdownLambdaFunction'